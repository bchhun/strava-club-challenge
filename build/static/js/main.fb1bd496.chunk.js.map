{"version":3,"sources":["AthleteList.tsx","SectionRandom.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AthleteList","athletes","formatDistanceToKm","distance","map","value","idx","key","name","distance_this_week","run","bike","others","can_participate","style","color","SectionRandom","props","useState","winner","setWinner","onClick","listParticipating","filter","el","arr","Math","floor","random","length","padding","App","data","date_from","date_to","last_updated","className","datetime","locale","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oorBAOe,SAASA,EAAT,GAAsD,IAA/BC,EAA8B,EAA9BA,SAElC,SAASC,EAAmBC,GACxB,OAAiB,IAAbA,EACM,GAAN,OAAUA,EAAW,KAElB,GAGX,OACI,oCACI,+BACI,+BACI,4BACI,oCACA,iDACA,kDACA,mDACA,8CAGR,+BACKF,EAASG,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,GACL,4BAAKD,EAAMG,MACX,4BAAKN,EAAmBG,EAAMI,mBAAmBC,MACjD,4BAAKR,EAAmBG,EAAMI,mBAAmBE,OACjD,4BAAKT,EAAmBG,EAAMI,mBAAmBG,SACjD,4BAAKP,EAAMQ,gBAAkB,0BAAMC,MAAO,CAAEC,MAAO,UAAtB,UAA4C,kB,WC5BtF,SAASC,EAAcC,GAA4B,IACtDhB,EAAagB,EAAbhB,SADqD,EAGjCiB,qBAHiC,mBAGtDC,EAHsD,KAG9CC,EAH8C,KAW7D,OACI,oCACI,4BAAQC,QARhB,WACI,IAAMC,EAAoBrB,EAASsB,QAAO,SAACC,EAAIlB,EAAKmB,GAAV,OAAkBD,EAAGX,mBACzDM,EAASG,EAAkBI,KAAKC,MAAMD,KAAKE,SAAWN,EAAkBO,SAC9ET,EAAUD,KAKN,mBACA,0BAAML,MAAO,CAAEgB,QAAS,KAAOX,GAAUA,EAAOX,OCC7CuB,MAdf,WAAgB,IACN9B,EAA+C+B,EAA/C/B,SAAUgC,EAAqCD,EAArCC,UAAWC,EAA0BF,EAA1BE,QAASC,EAAiBH,EAAjBG,aAEtC,OACE,yBAAKC,UAAU,iBACb,yDACA,6CAAmBD,GAAgB,kBAAC,IAAD,CAASE,SAAUF,EAAcG,OAAO,WAC3E,8BAAM,2BAAIL,EAAJ,OAAmBC,IACzB,kBAAClC,EAAD,CAAaC,SAAUA,IACvB,kBAACe,EAAD,CAAef,SAAUA,MCLXsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb1bd496.chunk.js","sourcesContent":["import React from 'react';\nimport { Athlete } from './models/athlete.model';\n\ninterface AthleteListProps {\n    athletes: Array<Athlete>\n}\n\nexport default function AthleteList({ athletes }: AthleteListProps) {\n\n    function formatDistanceToKm(distance: number): string {\n        if (distance !== 0) {\n            return `${distance / 1000}`;\n        }\n        return '';\n    }\n\n    return (\n        <>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Run distance (km)</th>\n                        <th>Bike distance (km)</th>\n                        <th>Other distance (km)</th>\n                        <th>Is eligible?</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {athletes.map((value, idx) =>\n                        <tr key={idx}>\n                            <td>{value.name}</td>\n                            <td>{formatDistanceToKm(value.distance_this_week.run)}</td>\n                            <td>{formatDistanceToKm(value.distance_this_week.bike)}</td>\n                            <td>{formatDistanceToKm(value.distance_this_week.others)}</td>\n                            <td>{value.can_participate ? <span style={{ color: 'green' }}>âœ“</span> : 'Not yet'}</td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n        </>\n    );\n}","import React, { useState } from 'react';\nimport { Athlete } from './models/athlete.model';\n\ninterface SectionRandomProps {\n    athletes: Array<Athlete>\n}\n\nexport default function SectionRandom(props: SectionRandomProps) {\n    const { athletes } = props;\n\n    const [winner, setWinner] = useState<Athlete | null>();\n\n    function onSelectWinner(): void {\n        const listParticipating = athletes.filter((el, idx, arr) => el.can_participate);\n        const winner = listParticipating[Math.floor(Math.random() * listParticipating.length)];\n        setWinner(winner);\n    }\n\n    return (\n        <>\n            <button onClick={onSelectWinner}>Select a winner</button>\n            <span style={{ padding: 16 }}>{winner && winner.name}</span>\n        </>\n    );\n}","import React from 'react';\nimport TimeAgo from 'timeago-react';\n\nimport './App.css';\nimport data from './data/data.json';\nimport AthleteList from './AthleteList';\nimport SectionRandom from './SectionRandom';\n\nfunction App() {\n  const { athletes, date_from, date_to, last_updated } = data;\n\n  return (\n    <div className=\"app container\">\n      <h1>nventive Strava Challenge</h1>\n      <h5>Last updated: {last_updated && <TimeAgo datetime={last_updated} locale='fr_CA' />}</h5>\n      <span><b>{date_from} to {date_to}</b></span>\n      <AthleteList athletes={athletes} />\n      <SectionRandom athletes={athletes} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}